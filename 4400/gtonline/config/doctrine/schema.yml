Account:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    email: { type: string(255), notnull: true, unique: true }
    password: { type: string(255), notnull: true }
    firstname: { type: string(255), notnull: true }
    lastname: { type: string(255), notnull: true }
    accountType: 
      type: enum
      values: [ normal, admin ]
      notnull: true

User:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    accountId: { type: integer, notnull: true }
    sex: { type: integer, notnull: true }
    birthday: { type: date, notnull: true }
    currentcity: { type: string(255) }
    hometown: { type: string(255) }
  relations:
    Account:
      class: Account 
      local: accountId 
      foreign: id
# any number of schools - set of schools and their types are maintained by administrator. each school record can also have a graduation year (not required). the same school can appear multiple times with different graduation years. allow deletion in case of error.
# any number of professional information records. a list of employers is maintained by administrator. User will select employer from list and provide a job title. the job title is not managed by admin and can be any text value. Can have multiple employers - can have the same employer multiple times as long as the job title is different in each case. also allow deletion of employers in case of error.

UserInterest:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    userId: { type: integer, notnull: true }
    description: { type: string(255), notnull: true }
  relations:
    User:
      class: User
      local: userId
      foreign: id

UserSchool:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    userId: { type: integer, notnull: true }
    schoolId: { type: integer, notnull: true }
    graduationYear: { type: integer }
# some kind of uniqueness in (userId, schoolId, graduationYear)
  relations:
    User:
      class: User
      local: userId
      foreign: id
    School:
      class: School
      local: schoolId
      foreign: id

UserEmployer:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    userId: { type: integer, notnull: true }
    employerId: { type: integer, notnull: true }
    jobTitle: { type: string(255) }
# some kind of uniqueness in (userId, employerId, jobTitle)
  relations:
    User:
      class: User
      local: userId
      foreign: id
    Employer:
      class: Employer
      local: employerId
      foreign: id

Administrator:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    accountId: { type: integer, notnull: true }
    lastLogin: { type: datetime, notnull: true }
  relations:
    Account:
      class: Account 
      local: accountId 
      foreign: id

Relationship:
  columns:
    sourceUserId: { type: integer, primary: true }
    destinationUserId: { type: integer, primary: true }
    description: { type: string(255) }
    acceptTime: { type: date } # This field will be null until accepted. once accepted, it should never be null.
    status:
      type: enum
      values: [pending, accepted, rejected, cancelled]
      notnull: true
  relations:
    SourceUser: 
      class: User
      local: sourceUserId
      foreign: id
    DestinationUser:
      class: User
      local: destinationUserId
      foreign: id

StatusUpdate:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    userId: { type: integer, notnull: true }
    created_at: { type: datetime, notnull: true }
    text: { type: string(512), notnull: true }
  relations:
    User:
      class: User
      local: userId
      foreign: id

StatusUpdateComment:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    statusUpdateId: { type: integer, notnull: true }
    created_at: { type: datetime, notnull: true }
    text: { type: string(512), notnull: true }
    userId: { type: integer, notnull: true }
  relations:
    User:
      class: User
      local: userId
      foreign: id
    StatusUpdate:
      class: StatusUpdate
      local: statusUpdateId
      foreign: id

School:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    name: { type: string(255), unique: true, notnull: true }
    type: { type: enum, notnull: true, values: ["College/University", "High School", "Middle School", "Elementary School"] }

Employer:
  columns:
    id: { type: integer, primary: true, autoincrement: true }
    name: { type: string(255), unique: true, notnull: true }
